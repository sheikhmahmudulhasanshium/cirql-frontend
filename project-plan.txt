Changelog - v1.2.1 (2024-06-29)
This is a critical security and stability release that overhauls the Two-Factor Authentication (2FA) deactivation process, hardens backend validation, and resolves a series of logic flaws that were causing application crashes and blocking core functionality.
üîí Security Enhancements
Secure OTP-Based 2FA Deactivation Implemented: The entire flow for disabling 2FA has been rebuilt from the ground up to eliminate a critical security and logic flaw.
Password Verification Removed: The previous, flawed implementation that incorrectly required a password for deactivation has been completely removed.
New Secure Endpoint (POST /auth/2fa/request-disable-code): A new endpoint has been introduced that allows a logged-in user to request a secure One-Time Passcode (OTP), which is then sent to their registered email address. This step verifies user intent and control over the account.
Hardened Disable Endpoint (POST /auth/2fa/disable): The final deactivation endpoint no longer accepts a password. It now requires the 6-digit OTP from the email, which is securely verified on the backend against the hashed code in the database before proceeding. This flow is now secure and consistent for all users, regardless of whether they signed up via Google or email/password.
üêõ Critical Bug Fixes & Stability Improvements
Fixed 500 Internal Server Error on 2FA Login: Resolved a fatal crash (TypeError: Cannot read properties of undefined (reading 'length')) that occurred during the final step of 2FA login.
Root Cause: The User schema had select: false on the loginHistory field, preventing it from being fetched from the database. The updateLastLogin service method then crashed when trying to access this non-existent property.
Solution: The database queries in UsersService (findByIdForAuth and findOneByEmailForAuth) have been updated to explicitly select +loginHistory, ensuring the complete user document is available and preventing the crash.
Resolved 400 Bad Request on API Calls: Fixed persistent validation errors that were blocking functionality like disabling 2FA.
Root Cause: A logic mismatch between frontend payloads and backend validation rules. The frontend was sending an empty string ("") for optional fields, which failed validation rules like @MinLength().
Solution: The frontend logic in Disable2faDialog.tsx was made more intelligent. It now conditionally builds the request payload, completely omitting optional fields when they are not needed, satisfying the backend's @IsOptional() validation rule correctly.
Corrected TypeScript Type Mismatches: Resolved a build-blocking TypeScript error (Property 'googleId' does not exist on type 'User') in the frontend.
Solution: The User interface within the frontend's AuthContext.tsx was updated to include the optional googleId property, bringing the frontend type definition in sync with the actual data structure provided by the backend. This ensures type safety and allows for more robust conditional logic in components.
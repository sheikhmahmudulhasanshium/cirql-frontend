Changelog - v1.5.0 (In Progress)
This version introduces a comprehensive, database-backed media management system, allowing users to upload, view, and delete their own files. It builds upon the initial file upload API to provide a full CRUD (Create, Read, Delete) experience.
‚ú® New Features
What it is: The application now features a complete media management system. A new set of frontend and backend components work together to handle file uploads securely. Every file a user uploads is now tracked in the database, linked to their account. New API endpoints have been created to allow users to fetch and delete their own media.
Why it matters: This is a foundational step towards giving users full control over their content. It enables future features like a "My Uploads" gallery and allows for attachments in support tickets and other parts of the app. It also ensures that when a user deletes a file, it is removed from both our database and cloud storage, which is essential for data privacy and storage management.
Affected Files:
Backend (cirql-backend):
src/upload/schemas/media.schema.ts: (New) A new Mongoose schema to store metadata for each uploaded file, linking it to a user.
src/upload/media.service.ts: (New) A dedicated service to handle all database operations for media files (create, find by user, delete).
src/upload/media.controller.ts: (New) Exposes new API endpoints (POST /media, GET /media/my-uploads, DELETE /media/:id). The POST endpoint is secured for server-to-server communication.
src/upload/upload.module.ts: Registered the new Media schema, service, and controller.
(Deleted) upload.controller.ts and upload.router.ts were removed as part of the architectural change to the official Next.js App Router pattern for uploadthing.
Frontend (cirql-frontend):
app/api/uploadthing/route.ts: (New) The official Next.js API route handler for uploadthing. It intercepts all upload requests from the client.
app/api/uploadthing/core.ts: (New) The core file router for uploadthing. It defines the types of files that can be uploaded and contains the server-side authentication middleware and onUploadComplete callback.
src/components/hooks/media/: (New) New folder containing get-my-media.ts and delete-media.ts hooks to communicate with the backend's media endpoints.
src/app/(routes)/settings/my-uploads/: (New) The new page and body components for the "My Uploads" gallery.
src/app/(routes)/settings/body.tsx: Updated to include a link to the new "My Uploads" page.
src/lib/types.ts: Updated to include Media and JwtPayload interfaces.
src/components/file-upload.tsx: Updated to pass the user's auth token in the request headers.
Architectural Decisions & Debugging Summary
During this implementation, several critical architectural decisions and debugging steps were taken:
Adopted the Official Next.js App Router Pattern for uploadthing:
Reasoning: Initial attempts to proxy upload requests directly from the frontend to the NestJS backend resulted in persistent 404 Not Found and CORS-related errors. The official uploadthing documentation and best practices for Next.js strongly recommend using a dedicated API route within the Next.js project (/app/api/uploadthing). This pattern simplifies the flow by handling authentication and pre-signed URL generation on the Next.js server (as a "Backend for the Frontend").
Implementation: We created route.ts and core.ts in the frontend project. The core.ts file now contains an authMiddleware that verifies the user's JWT. After a successful upload, the onUploadComplete callback makes a secure, server-to-server POST request to the NestJS backend to save the file's metadata.
Secured Server-to-Server Communication:
Reasoning: To ensure that only our Next.js server can call the POST /media endpoint on our NestJS backend, a shared secret key was introduced. This prevents unauthorized actors from creating media records in our database.
Implementation: A new environment variable, UPLOADTHING_WEBHOOK_SECRET, was created. This secret is present on both servers. The Next.js server sends it in a custom header (x-uploadthing-webhook-secret), and the NestJS controller verifies it before proceeding.
Resolved Package and Environment Conflicts:
Reasoning: An early attempt to upgrade to uploadthing@7 caused the NestJS backend to crash due to its use of modern ES Module syntax (import.meta) in a CommonJS environment. Furthermore, uploadthing@7 uses a different set of environment variables (UPLOADTHING_TOKEN).
Implementation: Both the frontend and backend uploadthing packages were standardized to the latest stable v6 release (~6.13.x), which is fully compatible with the NestJS environment. The required environment variables (UPLOADTHING_SECRET, UPLOADTHING_APP_ID) were then correctly configured in the frontend's .env file, as the Next.js server now handles the primary interaction with the UploadThing service.
üöÄ What's New in This Update?
A Foundation for Your Media Library: Every file you upload is now securely logged and associated with your account. This is the behind-the-scenes work needed to build a future "My Files" gallery where you can manage all your content in one place!
File Attachments in Support Tickets: You can now attach files when creating or replying to a support ticket.
A New "My Uploads" Page: A dedicated page is now available in your settings where you can view and delete all your uploaded files.
Your Profile, Your Picture: You can now upload a custom profile picture! Head over to your Settings page to find the new uploader.
A Faster, Smarter Admin Inbox: The admin support inbox now has powerful filtering and sorting tools, helping our team respond to you faster.
New Moderation & User Tools: Admins can now Lock and Unlock support tickets, and users can edit their own messages.
Enhanced Security: The 2FA system now uses stronger 6-character alphanumeric codes.
üìù Updated To-Do List (for v1.5.0 and beyond)
Here is the remaining work and a look at future improvements.
‚úÖ Done in this Session
Cloud-Based File & Image Handling: The core system is complete. The frontend authenticates and handles uploads via a Next.js API route, which then securely communicates with the NestJS backend to save metadata.
User-Facing Media Management UI: A "My Uploads" page has been created where users can view and delete their files.
Support Ticket Attachments: The FileUpload component has been integrated into the ticket reply and creation forms.
üö® Unresolved Issues
Image Previews on "My Uploads" Page: The page correctly fetches and lists media files, but image previews (<Image> component) are not rendering, showing a fallback icon instead. This is likely a final configuration issue in next.config.mjs or a subtle styling conflict. [High Priority to Fix]
High-Priority Features
Extend File Uploads to Announcements:
Goal: Leverage the new FileUpload component to allow images in announcements.
Plan: Integrate the component into the "Create/Update Announcement" modal, targeting the mediaUploader endpoint and saving the returned URL to the imageUrl field.
User Experience & Admin Features
In-App Surveys & Feedback System:
Goal: Implement a lightweight system to gather user feedback.
Plan: Integrate Google Forms by embedding a form within an <iframe>.
Optional & Future Technical Improvements
Add "Upload from URL" Functionality:
Goal: Allow users to provide a URL to a media file instead of uploading it directly.
Plan: Create a new backend endpoint that can fetch a file from a given URL and upload it to our cloud storage.
Architectural Refactor: Centralize Header/Footer Logic:
Plan: Utilize Next.js App Router root layout.tsx files and route groups.
Deferred Improvement: Refactor In-Memory Caching:
Plan: Replace the current in-memory caching with a distributed solution like Redis for a future release.


Project Changelog: Cross-Account Protection Implementation
This changelog outlines the modifications made to the cirql-backend and cirql-frontend projects to securely receive and act upon Google's Cross-Account Protection security events.
High-Level Summary
The primary goal was to fix the "Your project is not configured for Cross-Account Protection" warning. This was achieved by building a secure webhook on the backend to receive events from Google and adding logic to enforce session revocation for compromised accounts. The implementation was completed with zero new package dependencies and zero frontend code changes.
I. Backend Changes (cirql-backend)
The majority of the work was done on the backend to create a new, isolated system for handling security events.
A. New Feature: RiscModule
A dedicated module was created to encapsulate all logic related to the RISC (Risk and Incident Sharing and Coordination) feature.
src/risc/risc.module.ts
Change: Created a new NestJS module.
Reason: To register the new controller and service with the application and import necessary dependencies (UsersModule, ConfigModule).
src/risc/risc.controller.ts
Change: Created a new controller with a single POST /risc/webhook endpoint.
Reason: To provide the public-facing URL that Google's servers will send security events to. It uses @RawBody() to accept the plain-text JWT from Google and safely handles errors.
src/risc/risc.service.ts
Change: Created a new service containing the core business logic.
Reason:
Validates Tokens: Uses the existing google-auth-library to verify the JWT's signature, issuer, and audience (GOOGLE_PROJECT_ID), ensuring the message is authentic and from Google.
Processes Events: It understands different event types (sessions-revoked, account-disabled) and calls the appropriate internal function.
Takes Action: Implements forceUserLogout to invalidate user sessions and disableUserAccount to suspend accounts in your system.
B. Core Application Modifications
Key existing files were modified to support the new feature.
src/users/schemas/user.schema.ts
Change: Added a new optional field: tokensValidFrom: Date;.
Reason: This is the central mechanism for session revocation. When a security event occurs, we set this timestamp. Any JWT issued before this time is now considered invalid.
src/auth/strategies/jwt.strategy.ts
Change: Added a new security check within the validate method.
Reason: To enforce the tokensValidFrom rule. Before returning a validated user, it now checks if the token's iat (issued at) timestamp is older than the tokensValidFrom date. If it is, it throws a 401 UnauthorizedException, effectively logging the user out.
src/app.module.ts
Change: Imported and registered the new RiscModule. Added GOOGLE_PROJECT_ID to the Joi environment validation schema.
Reason: To make the application aware of the new module and its routes, and to ensure the backend always starts with the required project ID configuration.
II. Configuration Changes
Backend (.env file)
Change: Added the GOOGLE_PROJECT_ID=cirql-xyz variable.
Reason: Required by the RiscService to correctly validate the audience of the incoming security tokens from Google.
Frontend (next.config.mjs)
Change: Added { protocol: 'https', hostname: '*.ufs.sh' } to the images.remotePatterns array.
Reason: To resolve a runtime error where the Next.js Image component would not load images served from UploadThing's *.ufs.sh domain because it was not explicitly trusted.
III. Frontend Changes (cirql-frontend)
Change: No code changes were made.
Reason: The existing frontend architecture was already robust enough to handle the outcome. The AuthInitializer correctly interprets the 401 Unauthorized error (which the backend now sends for a revoked token) and automatically triggers the logout flow, redirecting the user to the sign-in page. This is the desired behavior.
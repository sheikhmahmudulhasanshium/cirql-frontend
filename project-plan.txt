Changelog - v1.4.0 (In Progress)
This entry documents the addition of advanced filtering and sorting capabilities for the admin support inbox.
‚ú® New Features
What it is: The primary admin ticket view (/home, "Contact Inbox" tab) has been enhanced with powerful new UI controls. Administrators can now filter the ticket list by status (Open, Pending Reply, Closed, Locked) and sort the results by "Last Updated," "First Updated," or "Subject" (ascending/descending).
Why it matters: This is a critical quality-of-life improvement for the support and moderation team. It allows administrators to instantly triage the inbox, prioritize tickets that need immediate attention (e.g., filter for "Open"), find specific conversations, and manage their workflow much more efficiently.
Affected Files:
Backend:
src/support/dto/admin-tickets-query.dto.ts: (New) A DTO was created to validate and type-safe the incoming query parameters.
src/support/support.controller.ts: The getAllTicketsForAdmin endpoint was updated to accept the new query DTO.
src/support/support.service.ts: The getAllTicketsForAdmin method was rewritten to dynamically build a Mongoose query based on the provided filter and sort parameters. The TicketSummary interface was updated to include the isLocked status.
Frontend:
app/(routes)/home/user/admin/admin-messages.tsx: This component was significantly refactored. State management for filters and sorting was added, along with new DropdownMenu controls. The data fetching logic was updated to pass the selected options as query parameters to the API.
lib/types.ts: The TicketSummary type was updated to include the isLocked property, ensuring type safety with the new API response.
üöÄ What's New in This Update?
Here's a summary of the powerful new features now available for your team:
A Smarter, Faster Inbox for Admins: Say goodbye to endless scrolling! The admin support inbox is now equipped with powerful filtering and sorting tools. Instantly find the tickets that matter most by filtering by status‚Äîlike 'Open' or 'Locked'‚Äîand sorting by the last update time or subject.
New Moderation Tools: Lock & Edit:
For Admins: You can now Lock a heated or sensitive conversation to pause all replies and investigate without interruption. Unlock it when you're ready to continue.
For Users: Made a typo in your support ticket? You can now edit your own messages to correct mistakes or add clarity.
Enhanced Security: Your account is now even more secure. Our Two-Factor Authentication system has been upgraded to use 6-character alphanumeric codes, increasing the possible combinations from one million to over two billion.
üìù Updated To-Do List (for v1.4.0 and beyond)
Here is the remaining work for this release cycle and a look at future improvements.
High-Priority Features
Cloud-Based File & Image Handling
Goal: Allow users to upload files, starting with profile pictures, to personalize their experience and enable richer content.
Plan: Integrate upload-thing with Cloudflare R2 for a modern, robust, and cost-effective file handling solution.
Backend Setup (Next Immediate Step):
Prerequisites: Add the required Cloudflare R2 and upload-thing credentials to the .env file.
Dependencies: Install the upload-thing and @uploadthing/react packages in the backend project.
File Router: Create a new src/upload/upload.router.ts file. This is the core of the backend logic. It will define a file route that:
Checks for an authenticated user via their JWT.
Restricts uploads to images only (e.g., image/*).
Enforces a file size limit (e.g., 4MB).
(Optional) Includes a callback onUploadComplete that could update the user's record, though we'll handle this on the client for now.
Integration: Create a new UploadModule and a controller to expose the upload-thing router via a NestJS endpoint (e.g., /api/uploadthing).
Frontend Implementation:
Upload Component: Build a reusable ImageUpload component using upload-thing's React hooks. This component will handle the UI for file selection, display upload progress, and manage error states.
Profile Integration: Add the ImageUpload component to the user profile settings page.
State Management: On successful upload, use the returned file URL to call the existing PATCH /users/profile/me endpoint to update the user's picture field in the database. Also, update the AuthContext state to reflect the new profile picture instantly in the UI.
User Experience & Admin Features
In-App Surveys & Feedback System
Goal: Implement a lightweight system to gather user feedback directly within the application.
Plan: Integrate Google Forms by embedding a form within an <iframe> on a dedicated feedback page or modal. This is a frontend-only task.
Optional & Future Technical Improvements
Architectural Refactor: Centralize Header/Footer Logic
Goal: Improve code maintainability and reduce repetition by ensuring common layout components are defined in a single, centralized location.
Plan: Utilize Next.js App Router root layout.tsx files and route groups to wrap pages with the appropriate Header and Footer components.
Deferred Improvement: Refactor In-Memory Caching
Goal: Replace the current in-memory Map-based caching in the backend with a distributed, persistent caching solution like Redis.
Plan: This is a backend-only architectural update. It involves setting up a managed Redis instance and creating a CacheModule in NestJS to abstract away interactions, then migrating existing services to use it.